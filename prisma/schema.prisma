datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id                Int        @id @default(autoincrement())
  name              String
  subdomain         String     @unique
  logo              String?
  schoolCode        String     @unique
  schoolType        SchoolType @default(CBT)
  plan              String     @default("free")
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  settings          Json?
  permissions       Json?
  analytics         Json?
  adminEmail        String?
  adminPassword     String?
  adminRoles        Json?
  students          Student[]
  exams             Exam[]
  departments       Department[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

enum SchoolType {
  HIGH_SCHOOL
  TERTIARY
  CBT
}

model Department {
  id                     String    @id @default(cuid())
  name                   String
  code                   String?
  schoolId               Int
  school                 School    @relation(fields: [schoolId], references: [id])
  students               Student[]
  courses                Course[]
  admissionFormatRegex   String?
  admissionFormatPreview String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String   @id @default(cuid())
  name         String
  code         String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  questions    ExamQuestion[]
  results      ExamResult[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id                   Int       @id @default(autoincrement())
  rollNumber           String    @unique
  admissionNo          String
  admissionFormatValid Boolean?  @default(true)
  role                 String    @default("student")
  status               String    @default("pending")
  password             String
  firstName            String
  lastName             String
  gender               String
  email                String    @unique
  contactNumber        String?
  dob                  DateTime?
  academicYear         String?
  level                String?
  term                 String?
  semester             String?
  class                String?
  departmentId         String?
  department           Department? @relation(fields: [departmentId], references: [id])
  schoolId             Int
  school               School    @relation(fields: [schoolId], references: [id])
  approvalStatus       String    @default("pending")
  isActive             Boolean   @default(true)
  approvedBy           String?
  approvedAt           DateTime?
  performance          Json?
  loginAttempts        Int?      @default(0)
  lastLogin            DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  subdomain            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  results              Result[]           @relation("StudentResults")
  accessCodes          ResultAccessCode[]
  examsTaken           Exam[]
  notifications        Notification[]     @relation("StudentNotifications")
  examResults          ExamResult[]
}

model Exam {
  id             String        @id @default(cuid())
  examTitle      String
  examCode       String        @unique
  mode           ExamMode
  examTypes      ExamType[]
  departmentId   String?
  levelId        String?
  classId        String?
  sessionYear    String
  startDate      DateTime
  endDate        DateTime
  duration       Int
  isResit        Boolean       @default(false)
  linkedExamId   String?
  status         ExamStatus    @default(PENDING)
  createdById    String
  schoolId       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  questions      ExamQuestion[]
  results        ExamResult[]
  notifications  ExamNotification[]
  school         School        @relation(fields: [schoolId], references: [id])
  students       Student[]
  examResults    Result[]      @relation("ExamResults")  // âœ… FIXED: Same relation name
  accessCodes    ResultAccessCode[]

  @@index([examCode])
}

enum ExamMode {
  ONLINE
  OFFLINE
}

enum ExamStatus {
  PENDING
  APPROVED
  LIVE
  CLOSED
}

enum ExamType {
  OBJECTIVE
  THEORY
  PRACTICAL
}

model ExamQuestion {
  id            String    @id @default(cuid())
  examId        String
  courseId      String
  questionType  ExamType
  questionText  String?
  questionFile  String?
  correctAnswer String?
  marks         Int?
  createdAt     DateTime  @default(now())

  exam          Exam      @relation(fields: [examId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
}

model ExamResult {
  id           String    @id @default(cuid())
  examId       String
  studentId    Int
  courseId     String
  score        Float?
  status       ResultStatus @default(PENDING)
  isResit      Boolean   @default(false)
  createdAt    DateTime  @default(now())

  exam         Exam      @relation(fields: [examId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id])
  course       Course    @relation(fields: [courseId], references: [id])
}

enum ResultStatus {
  PENDING
  PASSED
  FAILED
}

model ExamNotification {
  id        String    @id @default(cuid())
  examId    String
  message   String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())

  exam      Exam      @relation(fields: [examId], references: [id])
}

model Result {
  id           Int      @id @default(autoincrement())
  admission_no String
  roll_number  String
  result_type  String
  exam_name    String
  exam_type    String
  semester     String
  exam_year    Int
  course       String
  score        Int
  remarks      String?
  created_at   DateTime @default(now())

  student      Student  @relation("StudentResults", fields: [studentId], references: [id])
  studentId    Int

  exam         Exam     @relation("ExamResults", fields: [examId], references: [id])
  examId       String

  accessCodes  ResultAccessCode[]
}

model ResultAccessCode {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    String
  result    Result? @relation(fields: [resultId], references: [id])
  resultId  Int?

  code      String @unique
  maxUses   Int    @default(3)
  usedCount Int    @default(0)

  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  studentId Int
  student   Student  @relation("StudentNotifications", fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}